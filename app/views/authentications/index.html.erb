<% if @authentications %>
	<div class="row-fluid">
	  <div class="span4">
		<div class="well sidebar-nav" style="background: rgba(200, 200, 200, .2); position: relative; z-index: 999">
			<h4>Network channels: <%= @authentications.count %> <a class="btn" href="/auth/google"><i class="icon-plus"></i> Add</a></h4>
			<% unless @authentications.empty? %>
			<div class="authentications">
				<% for authentication in @authentications %>
				<div class="authentication">
					<strong><%= authentication.uid %></strong>: 
					<%= link_to 'refresh', "/network/#{authentication.provider}/#{authentication.id}/refresh" %> 
					<%= link_to '[x]', authentication_path(authentication), :confirm => 'Are you sure you want to remove this authentication option?', :method => :delete, :class => "remove" %><br/>
				</div>
				<% end %>
			</div>
			<% end %>
		</div>
	  </div>
	  <div class="span8">
	  	<% if @mailboxes %>
		  <% unless @mailboxes.empty? %>
			<div id="graph"></div>
			<style>
				#graph {
					height: 100%;
					left: 0;
					position: absolute;
					top: 0;
					width: 100%;
					z-index: 0;
				}
				circle.node { 
					-moz-box-shadow: 0px 0px 15px #0099ff;
					-webkit-box-shadow: 0px 0px 15px #0099ff;
					box-shadow: 0px 0px 15px #0099ff;
					stroke: none; 
				}
				line.link { stroke: #d7d7d7; }

			</style>
			<script>
			var width = $('#graph').width(), height = $('#graph').height(), radius = 1;
			
			var color = d3.scale.category20();
			var force = d3.layout.force()
				//.gravity(.05)
				//.charge(-150)
				.size([width, height]);
			var svg = d3.select("#graph").append("svg")
				.attr("width", width)
				.attr("height", height);
				
			/*** SVG EFFECT :: DROPSHADOW ***/
			var defs = svg.append("defs");
			var filter = defs.append("filter")
				.attr("id", "dropshadow")
				.attr("height", "130%");
			var feGaussianBlur = filter.append("feGaussianBlur")
				.attr("in", "SourceAlpha")
				.attr("stDeviation", 3);
			var feOffset = filter.append("feOffset")
				.attr("dx", 2)
				.attr("dy", 2)
				.attr("result", "offsetblur");
			var feComponentTransfer = filter.append("feComponentTransfer");
			var feFuncA = feComponentTransfer.append("feFuncA")
				.attr("type", "linear")
				.attr("slope", 0.2);
			var feMerge = filter.append("feMerge");
			var feMergeNode = feMerge.append("feMergeNode");
			var feMergeNode2 = feMerge.append("feMergeNode")
				.attr("in", "SourceGraphic");
			
			d3.json("../network.json", function(json) {
				force
					.charge(function(d){ return json.nodes.length * -1 })
					.linkDistance(function(d){ return 100 / d.value })
					.nodes(json.nodes)
					.links(json.links)
					.start();
				
				var link = svg.selectAll("line.link")
					.data(json.links)
					.enter().append("line")
					.attr("class", "link")
					.style("opacity", function(d){ 
						return d.value * .2
					})
					.style("stroke-width", function(d) { return 1 /*return d.value * 1.2 /*return Math.sqrt()*/; });
				
				var node = svg.selectAll("circle.node")
					.data(json.nodes)
					.enter()
					.append("circle")
					.attr("filter", function(d) { if (d.freq  > 10) { return "url(#dropshadow)" } })
					.attr("address", function(d){ return d.email })
					.attr("class", "node")
					.attr("mode", "ready")
					.attr("r", function(d) { 
						if (d.freq > 0 && d.freq <= 5){
							return 5
						} else if (d.freq  > 5 && d.freq <= 10) {
							return 8
						} else if (d.freq  > 10 && d.freq <= 20) {
							return 12
						} else if (d.freq  > 20 && d.freq <= 50) {
							return 15
						} else {
							return 20
						}
						//if (d.email=='dustinlarimer@gmail.com'){ return 12 } else { return 7 } 
					})
					.attr("cx", function(d){
						if (d.email=='dustinlarimer@gmail.com'){ return '9000px' }
					})
					.style("fill", function(d) { if (d.email=='dustinlarimer@gmail.com'){ return '#555' } else { return '#999' } })
					.style("opacity", function(d){ return d.freq * .05 })
					//return color(d.mailbox_id); })
					.call(force.drag)
					.on("mouseover", function(d){})
					.on("mouseout", function(d){})
					.on("click", function(d){
						if (this.getAttribute('mode')=="ready"){
							this.setAttribute('mode', 'active');
							this.setAttribute('r', 20);
						} else {
							this.setAttribute('mode', 'ready');
							this.setAttribute('r', 10);
						}
						//alert(this.getAttribute('fixed'));
					});
				node.append("title").text(function(d) { return d.email + " (" + d.freq + " instances)"; });
				
				var user = svg.select("circle.node[address='dustinlarimer@gmail.com']")
				user.data()[0].fixed = 1;
				console.log(user);
				
				force.on("tick", function() {
					
					link
						.attr("x1", function(d) { return d.source.x; })
						.attr("y1", function(d) { return d.source.y; })
						.attr("x2", function(d) { return d.target.x; })
						.attr("y2", function(d) { return d.target.y; });
					/*node
						.attr("cx", function(d) { return d.x; })
						.attr("cy", function(d) { return d.y; });*/
					node
						.attr("cx", function(d) { return d.x /*= Math.max(radius, Math.min(width - radius, d.x));*/ })
						.attr("cy", function(d) { return d.y /*= Math.max(radius, Math.min(height - radius, d.y));*/ });

					user.data()[0].fixed = 1;
					user.data()[0].x = $(window).width()/2;
					user.data()[0].y = $(window).height()/2;
					user.data()[0].px = $(window).width()/2;
					user.data()[0].py = $(window).height()/2;
					user.attr("cx", $(window).width()/2);
					user.attr("cy", $(window).height()/2);
				});
			});
			
			$(function(){
				function adjust(){
					setTimeout(function() {
						var viewport_height = $(window).height();
						var viewport_width = $(window).width();
						$("#graph").height(viewport_height).width(viewport_width);
						$("#graph svg").attr('height', viewport_height).attr('width', viewport_width);
						//alert(force.size([200,200]));
						force.size([viewport_width, viewport_height]).start();
					}, 250);
				}
				adjust();
				$(window).resize(function() { adjust() });
			});

			</script>
		    <div class="authentications" style="display: none;">
		      <% for mailbox in @mailboxes %>
		        <div class="authentication">
		          <strong><%= mailbox.email %></strong> (<%= mailbox.messages.count %> messages)<br/>
				  <ul>
				  <% for message in mailbox.messages %>
					<li>From: <%= message.from.email %></li>
				  <% end %>
				  </ul>
		        </div>
		      <% end %>
		    </div>
		  <% end %>
		<% else %>
			<h1>Mailboxes: 0</h1>
		<% end %>
	  </div>
	</div>


	
  
<% else %>
	<h1>Authentications: 0</h1>
	Because current_user not found :(
<% end %>